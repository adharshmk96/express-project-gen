#!/bin/bash

FOLDER_NAME=$1;

usage() {
  echo "Usage: $0 <folder name>"
  exit 1
}

if [ -z $FOLDER_NAME ]
then
  echo "Error: missing parameters."
  usage
fi

git init "$FOLDER_NAME"

cd "$FOLDER_NAME"


cat <<EOT >> .gitignore
# If you need to exclude files such as those generated by an IDE, use
# $GIT_DIR/info/exclude or the core.excludesFile configuration variable as
# described in https://git-scm.com/docs/gitignore

*.egg-info
*.pot
*.py[co]
.tox/
__pycache__
MANIFEST
dist/
docs/_build/
docs/locale/
node_modules/
tests/coverage_html/
tests/.coverage
build/
tests/report/

EOT

mkdir -p "$FOLDER_NAME"/"$FOLDER_NAME" postgres

cat <<EOT >> Dockerfile
FROM python:3
ENV PYTHONUNBUFFERED=1
WORKDIR /$FOLDER_NAME

COPY requirements.txt .

RUN pip install -r requirements.txt

COPY ./$FOLDER_NAME /$FOLDER_NAME/
EOT

cat <<EOT >> docker-compose.yml
networks:
    $FOLDER_NAME:
        driver: bridge

services:
    db:
        image: postgres
        container_name: postgres_container
        environment:
            POSTGRES_DB: $FOLDER_NAME
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            PGDATA: /data/postgres
        volumes:
            - ./postgres:/data/postgres
        ports:
            - "5432:5432"
        networks:
            - $FOLDER_NAME
        restart: unless-stopped

    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin_container
        environment:
            PGADMIN_DEFAULT_EMAIL: pgadmin@gmail.com
            PGADMIN_DEFAULT_PASSWORD: pgadmin
            PGADMIN_CONFIG_SERVER_MODE: "False"
        volumes:
            - ./pgadmin:/root/.pgadmin
            - ./pgadminhome:/home/
        ports:
            - "8080:80"
        networks:
            - $FOLDER_NAME
        restart: unless-stopped

    $FOLDER_NAME:
        image: $FOLDER_NAME-image
        container_name: $FOLDER_NAME-container
        build: .
        command: python manage.py runserver 0.0.0.0:8000
        volumes:
            - ./$FOLDER_NAME:/$FOLDER_NAME
        networks:
            - $FOLDER_NAME
        ports:
            - "8000:8000"
        depends_on:
            - db

EOT

cat <<EOT >> requirements.txt
Django>=3.0,<4.0
psycopg2-binary>=2.8
EOT

docker-compose run "$FOLDER_NAME" django-admin startproject "$FOLDER_NAME" .

sudo chown -R "$USER":"$USER" ./"$FOLDER_NAME"

sudo rm ./"$FOLDER_NAME"/"$FOLDER_NAME"/settings.py

cat <<EOT >> ./$FOLDER_NAME/$FOLDER_NAME/settings.py
"""
Django settings for test project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=q+&q5&pax8r4@&sf$yx9le@oevv65&_8w6bcvw#%+4k++_28z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'test.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'test.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
   
    'default': {

        'ENGINE': 'django.db.backends.postgresql_psycopg2',

        'NAME': '$FOLDER_NAME',

        'USER': 'postgres',

        'PASSWORD': 'postgres',

        'HOST': 'db',

        'PORT': '5432',

    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EOT